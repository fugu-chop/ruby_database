#! /usr/bin/env ruby
# This is known as a "hash-bang", and it allows a shell program to execute the script using the Ruby interpreter.
# frozen_string_literal: true

require 'pg'
require 'io/console'

# This is the execution class, we need some sort of 'run' method I think
class CLI
  def initialize
    @expenses = ExpenseData.new
  end

  def display_help
    puts <<~MSG
      Welcome to the CLI expense recording system.

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    MSG
  end

  def execute
    # When writing a script, we can access the list of arguments passed into a command-line program with ARGV.
    # ARGV will be an Array of arguments that have been passed to your command-line program.
    case ARGV.first
    when 'list'
      @expenses.list_expense
    when 'add'
      if ARGV.size == 3
        @expenses.add_expense(ARGV[1], ARGV[2])
      else
        puts 'You must provide an amount and memo.'
      end
    when 'search'
      @expenses.search_expense(ARGV[1])
    when 'delete'
      @expenses.delete_expense(ARGV[1])
    when 'clear'
      @expenses.clear_expenses
    else
      display_help
    end
  end
end

# class to handle expense related commands
class ExpenseData
  def initialize
    @db = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def add_expense(amount, memo)
    date = Date.today
    @db.exec_params("
      INSERT INTO expenses (amount, memo, created_on)
        VALUES ($1, $2, $3);", [amount, memo, date])
  end

  def list_expense
    results = @db.exec('SELECT * FROM expenses ORDER BY created_on ASC;')
    display_count(results)
    display_expenses(results)
    display_total(results) if results.ntuples.positive?
  end

  def search_expense(term)
    filtered_results = @db.exec_params('SELECT * FROM expenses WHERE memo ILIKE $1', ["%#{term}%"])
    display_count(filtered_results)
    display_expenses(filtered_results)
    display_total(filtered_results) if filtered_results.ntuples.positive?
  end

  def delete_expense(id)
    puts "There is no expense with the id '#{id}'." unless valid_expense?(id)

    return unless valid_expense?(id)

    deleted_row = @db.exec_params('SELECT * FROM expenses where id = $1', [id])
    @db.exec_params('DELETE FROM expenses WHERE id = $1', [id])
    puts 'The following expense has been deleted:'
    display_expenses(deleted_row)
  end

  def clear_expenses
    response = nil

    loop do
      puts 'This will remove all expenses. Are you sure? (y/n)'
      # We can't use Kernel#gets, because if there are any values in ARGV
      # (which is required since we need an argument with ./expense to call clear_expenses)
      # the Kernel#gets method tries to treat the first value in ARGV as a file
      # and read from that file (no 'clear' file)
      # To read from the user's input (i.e., stdin) in such a situation
      # you have to use it STDIN.gets or $stdin.gets explicitly.
      # getch only allows a single character input
      response = $stdin.getch
      break if %w[y n].include?(response)

      puts "\nThat's not a valid response - please enter y/n"
    end

    return if response == 'n'

    @db.exec('DELETE FROM expenses')
    puts 'All expenses have been deleted.'
  end

  private

  def valid_expense?(id)
    @db.exec_params('SELECT * FROM expenses WHERE id = $1', [id]).ntuples == 1
  end

  def display_expenses(obj)
    obj.each do |tuple|
      row = [tuple['id'].rjust(3), tuple['created_on'].rjust(10), tuple['amount'].rjust(8), tuple['memo']]
      puts row.join(' | ')
    end
  end

  def display_count(obj)
    counter = obj.ntuples.positive? ? obj.ntuples : 'no'
    puts "There are #{counter} expenses."
  end

  def display_total(obj)
    amount_sum = obj.field_values('amount').map(&:to_f).sum
    puts '-' * 50
    puts "Total #{format('$%#.2f', amount_sum).rjust(21)}"
  end

  def setup_schema
    @db.exec('SET client_min_messages = error')
    # Adding back ticks is like using the console from within Ruby
    `psql -d expenses < schema.sql` if @db.exec("SELECT COUNT(*)
                                                  FROM information_schema.tables
                                                  WHERE table_schema = 'public'
                                                  AND table_name = 'expenses';").values.flatten.first == '0'
  end
end

CLI.new.execute
