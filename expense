#! /usr/bin/env ruby
require "pg"

# This is the execution class, we need some sort of 'run' method I think
class CLI
  def initialize
    @expenses = ExpenseData.new
  end

  def display_help
    puts <<~MSG
    Welcome to the CLI expense recording system.

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    MSG
  end

  def execute
    # When writing a script, we can access the list of arguments passed into a command-line program with ARGV. 
    # ARGV will be an Array of arguments that have been passed to your command-line program.
    case ARGV.first
    when "list"
      @expenses.list_expense
    when "add"
      if ARGV.size == 3 
        @expenses.add_expense(ARGV[1], ARGV[2]) 
      else 
        puts "You must provide an amount and memo."
      end
    when "search"
      @expenses.search_expense(ARGV[1])
    else
      display_help
    end
  end
end

class ExpenseData
  def initialize
    @db = PG.connect(dbname:"expenses")
  end

  def add_expense(amount, memo)
    date = Date.today
    @db.exec_params("
      INSERT INTO expenses (amount, memo, created_on)
        VALUES ($1, $2, $3);", [amount, memo, date])
  end

  def list_expense
    results = @db.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    display_expenses(results)
  end

  def search_expense(term)
    filtered_results = @db.exec_params("SELECT * FROM expenses WHERE memo ILIKE $1", ["%#{term}%"])
    display_expenses(filtered_results)
  end

  private

  def display_expenses(obj)
    obj.each do |tuple|
      row = [tuple["id"].rjust(3), tuple["created_on"].rjust(10), tuple["amount"].rjust(8), tuple["memo"]]
      puts row.join(" | ")
    end
  end
end

CLI.new.execute
